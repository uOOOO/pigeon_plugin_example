// Autogenerated from Pigeon (v0.3.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.example.pigeon_plugin;

import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.StandardMessageCodec;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class Messages {

  public enum Type {
    TYPE_A(0),
    TYPE_B(1);

    private int index;
    private Type(final int index) {
      this.index = index;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class Version {
    private String string;
    public String getString() { return string; }
    public void setString(String setterArg) { this.string = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("string", string);
      return toMapResult;
    }
    static Version fromMap(Map<String, Object> map) {
      Version fromMapResult = new Version();
      Object string = map.get("string");
      fromMapResult.string = (String)string;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class Goods {
    private String name;
    public String getName() { return name; }
    public void setName(String setterArg) { this.name = setterArg; }

    private Long price;
    public Long getPrice() { return price; }
    public void setPrice(Long setterArg) { this.price = setterArg; }

    private Long expiryDate;
    public Long getExpiryDate() { return expiryDate; }
    public void setExpiryDate(Long setterArg) { this.expiryDate = setterArg; }

    private Type type;
    public Type getType() { return type; }
    public void setType(Type setterArg) { this.type = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("name", name);
      toMapResult.put("price", price);
      toMapResult.put("expiryDate", expiryDate);
      toMapResult.put("type", type.index);
      return toMapResult;
    }
    static Goods fromMap(Map<String, Object> map) {
      Goods fromMapResult = new Goods();
      Object name = map.get("name");
      fromMapResult.name = (String)name;
      Object price = map.get("price");
      fromMapResult.price = (price == null) ? null : ((price instanceof Integer) ? (Integer)price : (Long)price);
      Object expiryDate = map.get("expiryDate");
      fromMapResult.expiryDate = (expiryDate == null) ? null : ((expiryDate instanceof Integer) ? (Integer)expiryDate : (Long)expiryDate);
      Object type = map.get("type");
      fromMapResult.type = Type.values()[(int)type];
      return fromMapResult;
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface ExampleApi {
    Version getPlatformVersion();

    /** Sets up an instance of `ExampleApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, ExampleApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ExampleApi.getPlatformVersion", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Version output = api.getPlatformVersion();
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface StoreApi {
    void sell(Goods arg);

    /** Sets up an instance of `StoreApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, StoreApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.StoreApi.sell", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              Goods input = Goods.fromMap((Map<String, Object>)message);
              api.sell(input);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static Map<String, Object> wrapError(Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", null);
    return errorMap;
  }
}
